AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  di-txma-performance

  Performance Testing Framework for Load Testing

Conditions:
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  CreateVPCConfigurationForTestContainer:
    !Equals [!Ref RunTestContainerInVPC, "True"]

Parameters:
  Environment:
    Description: "The name of the environment to deploy to"
    Type: "String"
    AllowedValues:
      - build
      - staging
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  RunTestContainerInVPC:
    Description: |
      (Optional)
      Requires the testcontainers to run from within the VPC, allowing outbound configuration to be via the EIP,
      therefore allow-listable in the WAF.
      Any REGIONAL APIs under test will need to be accessible over the VPC NAT Gateway via public internet.
      Trying to communicate over a VPC endpoint for Regional API gateways results in Forbbidden 403.
    Type: "String"
    AllowedValues:
      - "True"
      - "False"
    Default: "False" # Existing behaviour is to run outside, teams need to flip this parameter to 'true' in order to benefit.
  VpcStackName:
    Type: "String"
    Description: "The name of the stack that defines the VPC to use"
    Default: "none"

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-PerformanceTester"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
      PermissionsBoundary:
        !If [
          UsePermissionsBoundary,
          !Ref PermissionsBoundary,
          !Ref AWS::NoValue,
        ]

  CodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-CodeBuildServicePolicy-${Environment}
      Roles:
        - !Ref CodeBuildServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
          - Effect: "Allow"
            Action:
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
            Resource:
              - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:*:repository/*"
          - Effect: "Allow"
            Action:
              - "ecr:GetAuthorizationToken"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - ecs:RegisterTaskDefinition
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
            Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${LoadTestCodeBuildProject}-*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt CodeBuildServiceRole.Arn
          - Effect: "Allow"
            Action:
              - "s3:ListAllMyBuckets"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::*"
              - !Sub "arn:${AWS::Partition}:s3:::*/*"
            Condition:
              StringEquals:
                "s3:ResourceAccount":
                  - !Sub "${AWS::AccountId}"
          - Effect: "Allow"
            Action:
              - "cloudformation:DescribeStacks"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*"
          - Effect: "Allow"
            Action:
              - "ssm:GetParameters"
              - "ssm:GetParametersByPath"
            Resource:
              - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/perfTest/*" #Create the parameters in AWS Systems Manager Parameter store under this path

  VPCTestPolicy:
    Type: AWS::IAM::ManagedPolicy
    # checkov:skip=CKV_AWS_111:states:The mix of VPC permissions don't take a resource
    Properties:
      Roles:
        - !Ref CodeBuildServiceRole
      ManagedPolicyName:
        Fn::Join:
          - "-"
          - - !Ref AWS::StackName
            - "VPCTestPolicy"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVpcs
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterfacePermission
            Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
            Condition:
              StringEquals:
                ec2:AuthorizedService: codebuild.amazonaws.com
              ArnEquals:
                ec2:Subnet:
                  - Fn::Sub:
                      - "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${SubnetId}"
                      - SubnetId:
                          Fn::ImportValue:
                            Fn::Sub: "${VpcStackName}-ProtectedSubnetIdA"
                  - Fn::Sub:
                      - "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${SubnetId}"
                      - SubnetId:
                          Fn::ImportValue:
                            Fn::Sub: "${VpcStackName}-ProtectedSubnetIdB"

  LoadTestCodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: VPCTestPolicy
    Properties:
      Name: !Sub "LoadTest-${AWS::StackName}"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: "NO_ARTIFACTS" # Needs changing to GH in build, and promote bucket in staging.
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "CONTAINER-IMAGE-PLACEHOLDER" # Replace this with the ECR repo for this SAM container pipeline.
        ImagePullCredentialsType: "SERVICE_ROLE"
        Type: "LINUX_CONTAINER"
      VpcConfig: !If
        - CreateVPCConfigurationForTestContainer
        - SecurityGroupIds:
            - !GetAtt TestContainerSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdA"
            - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdB"
          VpcId:
            Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
        - !Ref AWS::NoValue
      TimeoutInMinutes: 480
      Source:
        Type: "NO_SOURCE"
        BuildSpec: !Sub |
          version: 0.2

          env:
            variables:
              WORK_DIR: /home/k6/scripts
              TEST_SCRIPT: test.js
              TEST_REPORT_DIR: results
              PROFILE: smoke
              SCENARIO: all
              K6_DYNATRACE_DASHBOARD_ID: 1e845440-d013-4472-9d65-2ea21a5cb41a
            parameter-store:
        # GRAFANA_API_KEY: "/perfTest/grafana_api_key"

          phases:
            pre_build:
              commands:
                - mkdir -p "$TEST_REPORT_DIR"
                # - sed -e "s#{URL}#$K6_DYNATRACE_URL#" -e "s#{APITOKEN}#$K6_DYNATRACE_APITOKEN#" -e "s#{ID}#$CODEBUILD_BUILD_ID#" $OTEL_TEMPLATE > $OTEL_CONFIG
                # - /otel/otelcol-contrib  --config=$OTEL_CONFIG > otel.log 2>&1 &
            build:
              commands:
                - start=`date +"%Y-%m-%dT%H:%M:%SZ"`
                - echo "Run performance test"
                - k6 run $WORK_DIR/$TEST_SCRIPT --tag script=$TEST_SCRIPT --tag account_id=${AWS::AccountId} --out statsd
            post_build:
              commands:
                - OTEL_PID=$(pgrep /otel/otelcol-contrib)
                - kill $OTEL_PID
                - while kill -0 $OTEL_PID; do sleep 1; done
                - cat otel.log
                - end=`date +"%Y-%m-%dT%H:%M:%SZ"`
                # - |
                #   echo "Dashboard link: /#dashboard;gtf="$start"%20to%20"$end";id="$K6_DYNATRACE_DASHBOARD_ID";gf=all;es=CUSTOM_DIMENSION-build_id:"$CODEBUILD_BUILD_ID
                - echo Performance test complete

      Tags:
        - Key: "Name"
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - "LoadTestCodeBuildProject"
        - Key: "Service"
          Value: "ci/cd"
        - Key: "Source"
          Value: "alphagov/di-txma-performance"

  TestContainerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Condition: CreateVPCConfigurationForTestContainer
    Properties:
      GroupDescription: >-
        Permits unrestricted outbound on 443 to allow the testcontainer to access VPC endpoints and outbound over SSL.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to the wider internet on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

Outputs:
  PerformanceRoleArn:
    Description: "The RoleArn for performance testers to trigger CodeBuild tests."
    Value: !Ref CodeBuildServiceRole
